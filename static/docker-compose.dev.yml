version: '3.8'

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-secure}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure}
      POSTGRES_DB: milou
      DB_NAME: milou
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
      - ./docker/database/init-script.sh:/docker-entrypoint-initdb.d/init-script.sh:ro
    command: ["postgres", "-c", "client_encoding=UTF8"]
    ports:
      - "5432:5432"
    networks:
      - milou_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-secure} -d milou"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8082:80"
    networks:
      - milou_network
    depends_on:
      - db
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - milou_network
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-a", "${REDIS_PASSWORD:-your_redis_password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - milou_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: ./dashboard
      dockerfile: backend/Dockerfile.backend.dev
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
      - PORT=9999
      - DB_HOST=db
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
      - CHOKIDAR_USEPOLLING=true
      - DOTENV_CONFIG_PATH=/app/.env
      - WATCHPACK_POLLING=true
    volumes:
      - ./dashboard/backend/src:/app/backend/src:delegated
      - ./dashboard/backend/tsconfig.json:/app/backend/tsconfig.json:ro
      - uploads:/app/backend/src/uploads
      - backend_node_modules:/app/node_modules
      - backend_workspace_node_modules:/app/backend/node_modules

    command: >
      /bin/sh -c "
        cd /app/backend &&
        npm run dev
      "
    ports:
      - "9999:9999"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - milou_network
    tty: true
    stdin_open: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/api/auth/status", "||", "exit", "1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s


  frontend:
    build:
      context: ./dashboard
      dockerfile: frontend/Dockerfile.frontend.dev
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
      - VITE_API_URL=/api
      - USE_HTTPS=false
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
      - DOTENV_CONFIG_PATH=/app/.env
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
    volumes:
      # Use a single root mount with consistent delegated mode for best WSL performance
      - ./dashboard/frontend:/app/frontend:delegated
      # Named persistent volume for node_modules to avoid Windows filesystem performance issues
      - /app/node_modules
      - /app/frontend/node_modules

    command: >
      /bin/sh -c "
        cd /app/frontend &&
        npm run dev
      "
    ports:
      - "5173:5173"
    networks:
      - milou_network
    tty: true
    stdin_open: true

  engine:
    build:
      context: ./engine
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - PYTHONUNBUFFERED=1
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      - DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER:-secure}:${POSTGRES_PASSWORD:-secure}@db:5432/milou
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your_redis_password}
      - WATCHDOG_POLLING=true
      - WATCHDOG_POLLING_INTERVAL=1
    volumes:
      # Use a single consistent mount with delegated mode for best WSL performance
      - ./engine:/app:delegated
      # Keep .env file mount
      - ./.env:/app/.env:ro
      # Named persistent volume for logs
      - engine_logs:/app/src/logger/logs:rw
      # Named persistent volume for Python packages
      - engine_venv:/app/venv
    command: ["/bin/sh", "-c", "if [ ! -f venv/bin/activate ]; then python -m venv venv && . venv/bin/activate && pip install -r requirements.txt && pip install watchdog; elif [ ! -f /tmp/requirements.md5 ] || ! md5sum -c /tmp/requirements.md5 >/dev/null 2>&1; then . venv/bin/activate && pip install -r requirements.txt && md5sum requirements.txt > /tmp/requirements.md5; else . venv/bin/activate; fi && watchmedo auto-restart --directory=./src --pattern=*.py --recursive --poll-rate=1 -- python src/main.py"]
    depends_on:
      - rabbitmq
      - db
      - backend
    networks:
      - milou_network
    tty: true
    stdin_open: true

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "80:80"
      - "${SSL_PORT:-443}:443"
    environment:
      - NODE_ENV=development
      - SERVER_NAME=${SERVER_NAME:-localhost}
    volumes:
      - ./docker/dummy-certs:/etc/ssl:ro
      - ./docker/nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
    networks:
      - milou_network

networks:
  milou_network:
    driver: bridge

volumes:
  pgdata: {}
  rabbitmq_data: {}
  pgadmin_data: {}
  redis_data: {}
  backend_logs: {}
  engine_logs: {}
  engine_venv: {}
  uploads: {}
  backend_node_modules: {}
  backend_workspace_node_modules: {}
  frontend_node_modules: {}
  frontend_workspace_node_modules: {}