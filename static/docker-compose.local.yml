# =============================================================================
# Docker Compose Local Development Override
# Uses locally built images with source code mounting for development
# =============================================================================

services:
  # Development database
  db:
    image: postgres:16
    environment:
      # Map standard .env variables to what Postgres container expects
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    
  # Development backend with live code mounting  
  backend:
    build:
      context: /home/user/milou/dashboard
      dockerfile: backend/Dockerfile.backend
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      # Map standard .env variables to what backend container expects
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - JWT_SECRET=${SESSION_SECRET}
      - SSO_CONFIG_ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - FRONTEND_URL=https://${DOMAIN:-localhost}
      - BACKEND_URL=https://${DOMAIN:-localhost}:${PORT:-9999}/
    volumes:
      - /home/user/milou/dashboard/backend/src:/app/backend/src:delegated
      - /home/user/milou/dashboard/backend/tsconfig.json:/app/backend/tsconfig.json:ro
      - /home/user/milou/dashboard/tsconfig.json:/app/tsconfig.json:ro
      - backend_node_modules:/app/node_modules
      - backend_workspace_node_modules:/app/backend/node_modules
      - backend_logs:/app/logs:rw
    command: >
      /bin/sh -c "
        chown -R node:node /app/logs /app/uploads &&
        cd /app/backend &&
        su-exec node npm run dev
      "
    
  # Development frontend with live code mounting
  frontend:
    build:
      context: /home/user/milou/dashboard
      dockerfile: frontend/Dockerfile.frontend
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      # Map standard .env variables to what frontend container expects
      - VITE_DOMAIN=${DOMAIN}
      - VITE_FRONTEND_URL=https://${DOMAIN:-localhost}
      - VITE_BACKEND_URL=https://${DOMAIN:-localhost}:${PORT:-9999}/
    volumes:
      - /home/user/milou/dashboard/frontend:/app/frontend:delegated
      - /app/node_modules
      - /app/frontend/node_modules
    command: >
      /bin/sh -c "
        cd /app/frontend &&
        if [ ! -d node_modules ] || [ ! -f node_modules/.installed ]; then
          npm install && touch node_modules/.installed
        fi &&
        npm run dev -- --host 0.0.0.0
      "
    
  # Development engine with live code mounting
  engine:
    build:
      context: /home/user/milou/engine
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - WATCHDOG_POLLING=true
      - WATCHDOG_POLLING_INTERVAL=1
      # Map standard .env variables to what engine container expects
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - JWT_SECRET=${SESSION_SECRET}
      - SSO_CONFIG_ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - DOMAIN=${DOMAIN}
    volumes:
      - /home/user/milou/engine:/app:delegated
      - engine_logs:/app/src/logger/logs:rw
      - engine_venv:/app/venv
    command: >
      /bin/sh -c "
        if [ ! -f venv/bin/activate ]; then
          python -m venv venv &&
          . venv/bin/activate &&
          pip install -r requirements.txt &&
          pip install watchdog
        elif [ ! -f /tmp/requirements.md5 ] || ! md5sum -c /tmp/requirements.md5 >/dev/null 2>&1; then
          . venv/bin/activate &&
          pip install -r requirements.txt &&
          md5sum requirements.txt > /tmp/requirements.md5
        else
          . venv/bin/activate
        fi &&
        watchmedo auto-restart --directory=./src --pattern=*.py --recursive -- python src/main.py
      "
    
  # Development nginx
  nginx:
    build:
      context: /home/user/milou/docker/nginx
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DOMAIN=${DOMAIN}

volumes:
  backend_node_modules: {}
  backend_workspace_node_modules: {}
  backend_logs: {}
  engine_logs: {}
  engine_venv: {} 