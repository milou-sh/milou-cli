version: '3.8'

services:
  db:
    image: ghcr.io/milou-sh/milou/database:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-milou}
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
    command: ["postgres", "-c", "client_encoding=UTF8"]
    ports:
      - "5432:5432"
    networks:
      - milou_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - milou_network
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-a", "${REDIS_PASSWORD:-your_redis_password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "8083:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - milou_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    image: ghcr.io/milou-sh/milou/backend:latest
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=9999
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DATABASE_URI=${DATABASE_URI}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SSL_ENABLED=${SSL_ENABLED}
    expose:
      - "9999"
    volumes:
      - uploads:/app/dashboard/backend/src/uploads:rw
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - milou_network
      - proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 9999 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  frontend:
    image: ghcr.io/milou-sh/milou/frontend:latest
    environment:
      - VITE_API_URL=/api
      - NODE_ENV=${NODE_ENV:-development}
    expose:
      - "5173"
    depends_on:
      - backend
    networks:
      - milou_network
      - proxy

  engine:
    image: ghcr.io/milou-sh/milou/engine:latest
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-milou}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-milou}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB:-milou}
      - PYTHONUNBUFFERED=1
    volumes:
      - engine_logs:/app/src/logger/logs:rw
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - milou_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: ghcr.io/milou-sh/milou/nginx:latest
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:${SSL_PORT:-443}:443"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - SERVER_NAME=${CUSTOMER_DOMAIN_NAME}
    volumes:
      - ${SSL_CERT_PATH:-./ssl}:/tmp/ssl:ro
    entrypoint: |
      sh -c '
        if [ -f /tmp/ssl/milou.crt ] && [ -f /tmp/ssl/milou.key ]; then
          cp /tmp/ssl/milou.crt /etc/ssl/milou.crt
          cp /tmp/ssl/milou.key /etc/ssl/milou.key
        elif [ -f /tmp/ssl/server.crt ] && [ -f /tmp/ssl/server.key ]; then
          cp /tmp/ssl/server.crt /etc/ssl/milou.crt
          cp /tmp/ssl/server.key /etc/ssl/milou.key
        else
          echo "ERROR: No SSL certificates found in /tmp/ssl/"
          echo "Expected: milou.crt/milou.key or server.crt/server.key"
          exit 1
        fi
        chmod 644 /etc/ssl/milou.crt
        chmod 600 /etc/ssl/milou.key
        exec /docker-entrypoint.sh nginx -g "daemon off;"
      '
    depends_on:
      - backend
      - frontend
    networks:
      - milou_network

networks:
  milou_network:
    driver: bridge
  proxy:
    external: true

volumes:
  pgdata: {}
  rabbitmq_data: {}
  redis_data: {}
  backend_logs: {}
  engine_logs: {}
  uploads: {}