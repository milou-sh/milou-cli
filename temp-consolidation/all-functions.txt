lib/system/configuration.sh:generate_random_string() {
lib/system/configuration.sh:validate_config_inputs() {
lib/system/configuration.sh:generate_config() {
lib/system/configuration.sh:update_config_value() {
lib/system/configuration.sh:get_config_value() {
lib/system/configuration.sh:validate_config() {
lib/system/configuration.sh:show_config() {
lib/system/configuration.sh:validate_configuration() {
lib/system/ssl.sh:setup_ssl() {
lib/system/ssl.sh:setup_ssl_interactive() {
lib/system/ssl.sh:renew_ssl_certificates() {
lib/system/ssl.sh:setup_existing_certificates() { 
lib/system/ssl.sh:setup_letsencrypt_certificate() { 
lib/system/ssl.sh:restore_ssl_certificates() { 
lib/system/environment.sh:discover_environment_file() {
lib/system/environment.sh:validate_environment_file() {
lib/system/environment.sh:generate_credentials_hash() {
lib/system/environment.sh:consolidate_environment_files() {
lib/system/environment.sh:load_environment() {
lib/system/environment.sh:export_environment_for_docker() {
lib/system/environment.sh:check_credentials_changed() {
lib/system/environment.sh:store_credentials_hash() {
lib/system/environment.sh:resolve_ssl_path_for_docker() {
lib/system/environment.sh:initialize_environment_manager() {
lib/system/environment.sh:get_env_var() {
lib/system/environment.sh:is_environment_configured() {
lib/system/environment.sh:show_environment_status() {
lib/system/backup.sh:create_backup() {
lib/system/backup.sh:backup_system_config() {
lib/system/backup.sh:backup_ssl() {
lib/system/backup.sh:backup_docker_volumes() {
lib/system/backup.sh:backup_single_volume() {
lib/system/backup.sh:backup_docker_compose() {
lib/system/backup.sh:create_backup_metadata() {
lib/system/backup.sh:list_backups() {
lib/system/backup.sh:restore_backup() {
lib/system/backup.sh:restore_config() {
lib/system/backup.sh:restore_ssl() {
lib/system/backup.sh:restore_docker_volumes() {
lib/system/backup.sh:restore_single_volume() {
lib/system/backup.sh:clean_old_backups() {
lib/system/setup.sh:prompt_user() {
lib/system/setup.sh:validate_input() {
lib/system/setup.sh:test_github_auth() {
lib/system/setup.sh:interactive_setup() {
lib/system/setup.sh:interactive_setup_wizard() {
lib/system/setup.sh:run_non_interactive_setup() {
lib/system/update.sh:update_milou() {
lib/system/update.sh:apply_migrations() {
lib/system/update.sh:get_milou_version() {
lib/system/update.sh:check_for_updates() {
lib/system/prerequisites.sh:load_prerequisites_modules() {
lib/system/prerequisites.sh:install_prerequisites() {
lib/system/prerequisites.sh:install_system_dependencies() {
lib/system/config/migration.sh:generate_secure_random() {
lib/system/config/migration.sh:validate_config_inputs() {
lib/system/config/migration.sh:display_admin_credentials() {
lib/system/config/migration.sh:generate_config_with_preservation() {
lib/system/config/migration.sh:migrate_configuration() {
lib/system/config/migration.sh:is_config_compatible() {
lib/system/config/migration.sh:modernize_configuration() {
lib/system/config/migration.sh:validate_migrated_config() {
lib/system/config/backup.sh:backup_environment_config() {
lib/system/config/backup.sh:restore_environment_config() {
lib/system/config/backup.sh:list_environment_config_backups() {
lib/system/config/backup.sh:clean_old_environment_config_backups() {
lib/system/config/backup.sh:backup_config() {
lib/system/config/backup.sh:restore_config() {
lib/system/config/backup.sh:list_config_backups() {
lib/system/config/backup.sh:clean_old_backups() {
lib/system/config/validation.sh:get_required_environment_variables() {
lib/system/config/validation.sh:get_optional_environment_variables() {
lib/system/config/validation.sh:validate_environment_comprehensive() {
lib/system/config/validation.sh:validate_environment_essential() {
lib/system/config/validation.sh:validate_environment_production() {
lib/system/config/validation.sh:check_environment_variable() {
lib/system/config/validation.sh:list_missing_variables() {
lib/system/config/validation.sh:validate_config() {
lib/system/config/validation.sh:validate_configuration() {
lib/system/config/validation.sh:validate_environment_file() {
lib/system/config/core.sh:generate_random_string() {
lib/system/config/core.sh:validate_config_inputs() {
lib/system/config/core.sh:generate_config() {
lib/system/config/core.sh:update_config_value() {
lib/system/config/core.sh:get_config_value() {
lib/system/config/core.sh:validate_config() {
lib/system/config/core.sh:show_config() {
lib/system/config/core.sh:validate_configuration() {
lib/system/config/preservation.sh:detect_existing_installation() {
lib/system/config/preservation.sh:show_existing_installation_summary() {
lib/system/config/preservation.sh:preserve_database_credentials() {
lib/system/config/preservation.sh:get_preserved_config() {
lib/system/config/preservation.sh:has_preserved_config() {
lib/system/config/preservation.sh:list_preserved_config() {
lib/system/config/preservation.sh:clear_preserved_config() {
lib/system/config/preservation.sh:needs_configuration_migration() {
lib/system/config/preservation.sh:get_config_version() {
lib/system/config/preservation.sh:export_preserved_config() {
lib/system/ssl/paths.sh:resolve_ssl_path() {
lib/system/ssl/paths.sh:get_appropriate_ssl_path() {
lib/system/ssl/paths.sh:ensure_docker_compatible_ssl() {
lib/system/ssl/paths.sh:normalize_ssl_path() {
lib/system/ssl/paths.sh:get_relative_ssl_path() {
lib/system/ssl/paths.sh:is_docker_compatible_path() {
lib/system/ssl/paths.sh:prepare_ssl_for_docker() {
lib/system/ssl/paths.sh:get_docker_mount_path() {
lib/system/ssl/paths.sh:get_ssl_path_for_env() {
lib/system/ssl/paths.sh:validate_ssl_path_access() {
lib/system/ssl/paths.sh:check_ssl_path_security() {
lib/system/ssl/paths.sh:migrate_ssl_path() {
lib/system/ssl/paths.sh:find_ssl_certificates() {
lib/system/ssl/validation.sh:validate_ssl_certificates() {
lib/system/ssl/validation.sh:check_ssl_expiration() {
lib/system/ssl/validation.sh:validate_certificate_domain() {
lib/system/ssl/validation.sh:show_ssl_info() {
lib/system/ssl/validation.sh:show_certificate_info() {
lib/system/ssl/validation.sh:backup_ssl_certificates() {
lib/system/ssl/validation.sh:backup_nginx_ssl_certificates() {
lib/system/ssl/validation.sh:import_user_certificates() {
lib/system/ssl/validation.sh:consolidate_existing_certificates() {
lib/system/ssl/validation.sh:is_domain_publicly_accessible() {
lib/system/ssl/validation.sh:validate_docker_ssl_access() {
lib/system/ssl/nginx_integration.sh:inject_ssl_certificates() {
lib/system/ssl/nginx_integration.sh:inject_certificates_to_container() {
lib/system/ssl/nginx_integration.sh:inject_ssl_certificates_enhanced() {
lib/system/ssl/nginx_integration.sh:inject_ssl_certificates_from_files() {
lib/system/ssl/nginx_integration.sh:is_nginx_container_running() {
lib/system/ssl/nginx_integration.sh:is_nginx_container_exists() {
lib/system/ssl/nginx_integration.sh:start_nginx_container() {
lib/system/ssl/nginx_integration.sh:stop_nginx_container() {
lib/system/ssl/nginx_integration.sh:restart_nginx_container() {
lib/system/ssl/nginx_integration.sh:validate_nginx_config_in_container() {
lib/system/ssl/nginx_integration.sh:reload_nginx_config() {
lib/system/ssl/nginx_integration.sh:validate_cert_key_pair() {
lib/system/ssl/nginx_integration.sh:show_nginx_certificate_status() {
lib/system/ssl/nginx_integration.sh:test_https_connectivity() {
lib/system/ssl/nginx_integration.sh:backup_nginx_certificates_from_container() {
lib/system/ssl/nginx_integration.sh:setup_ssl_with_nginx() {
lib/system/ssl/interactive.sh:setup_ssl_interactive_enhanced() {
lib/system/ssl/interactive.sh:ssl_setup_wizard() {
lib/system/ssl/interactive.sh:ssl_certificate_type_wizard() {
lib/system/ssl/interactive.sh:ssl_letsencrypt_wizard() {
lib/system/ssl/interactive.sh:ssl_selfsigned_wizard() {
lib/system/ssl/interactive.sh:ssl_import_wizard() {
lib/system/ssl/interactive.sh:ssl_copy_wizard() {
lib/system/ssl/interactive.sh:ssl_import_certificates() {
lib/system/ssl/interactive.sh:ssl_check_letsencrypt_compatibility() {
lib/system/ssl/interactive.sh:ssl_prompt_letsencrypt_anyway() {
lib/system/ssl/interactive.sh:ssl_validate_cert_key_pair() {
lib/system/ssl/interactive.sh:ssl_setup_complete() {
lib/system/ssl/interactive.sh:ssl_status_enhanced() {
lib/system/ssl/interactive.sh:ssl_validate_enhanced() {
lib/system/ssl/interactive.sh:ssl_backup_enhanced() {
lib/system/ssl/interactive.sh:ssl_backup_container_enhanced() {
lib/system/ssl/interactive.sh:ssl_status_container_enhanced() {
lib/system/ssl/interactive.sh:ssl_inject_enhanced() {
lib/system/ssl/interactive.sh:ssl_restart_nginx() {
lib/system/ssl/interactive.sh:ssl_show_help() {
lib/system/ssl/generation.sh:generate_localhost_certificate() {
lib/system/ssl/generation.sh:generate_production_certificate() {
lib/system/ssl/generation.sh:generate_minimal_certificate() {
lib/system/ssl/generation.sh:generate_self_signed_certificate() {
lib/system/ssl/generation.sh:can_use_letsencrypt() {
lib/system/ssl/generation.sh:check_port_80_status() {
lib/system/ssl/generation.sh:generate_letsencrypt_certificate() {
lib/system/ssl/generation.sh:generate_letsencrypt_standalone() {
lib/system/ssl/generation.sh:generate_letsencrypt_with_nginx_stop() {
lib/system/ssl/generation.sh:copy_letsencrypt_certificates() {
lib/system/ssl/generation.sh:show_letsencrypt_troubleshooting() {
lib/system/ssl/generation.sh:install_certbot() {
lib/system/ssl/generation.sh:show_certbot_install_instructions() {
lib/system/ssl/generation.sh:backup_ssl_certificates() {
lib/system/ssl/generation.sh:renew_letsencrypt_certificate() {
lib/system/ssl/generation.sh:needs_renewal() {
lib/system/prerequisites/detection.sh:detect_distribution() {
lib/system/prerequisites/detection.sh:detect_package_manager() {
lib/system/prerequisites/detection.sh:update_system_packages() {
lib/system/prerequisites/docker.sh:install_docker() {
lib/system/prerequisites/docker.sh:install_docker_debian_ubuntu() {
lib/system/prerequisites/docker.sh:install_docker_rhel_centos() {
lib/system/prerequisites/docker.sh:install_docker_fedora() {
lib/system/prerequisites/docker.sh:install_docker_arch() {
lib/system/prerequisites/docker.sh:install_docker_opensuse() {
lib/system/prerequisites/docker.sh:install_docker_generic() {
lib/system/prerequisites/docker.sh:configure_docker_service() {
lib/system/prerequisites/docker.sh:verify_docker_compose() {
lib/system/prerequisites/tools.sh:install_required_tools() {
lib/system/prerequisites/tools.sh:configure_basic_firewall() {
lib/system/prerequisites/tools.sh:check_prerequisites_quick() {
lib/system/security.sh:run_security_assessment() {
lib/system/security.sh:harden_system() {
lib/system/security.sh:monitor_security_events() {
lib/system/security.sh:check_port_listening() {
lib/system/security.sh:generate_secure_password() {
lib/system/security.sh:validate_secure_config() {
lib/system/security.sh:create_security_report() {
lib/core/utilities.sh:milou_generate_secure_random() {
lib/core/utilities.sh:milou_check_system_requirements() {
lib/core/utilities.sh:milou_get_system_info() {
lib/core/utilities.sh:milou_cleanup_temp() {
lib/core/utilities.sh:milou_create_timestamped_backup() {
lib/core/utilities.sh:generate_secure_random() { milou_generate_secure_random "$@"; }
lib/core/utilities.sh:check_system_requirements() { milou_check_system_requirements "$@"; }
lib/core/utilities.sh:get_system_info() { milou_get_system_info "$@"; }
lib/core/utilities.sh:cleanup_temp() { milou_cleanup_temp "$@"; }
lib/core/utilities.sh:create_timestamped_backup() { milou_create_timestamped_backup "$@"; }
lib/core/module-loader.sh:milou_modules_init() {
lib/core/module-loader.sh:milou_load_module() {
lib/core/module-loader.sh:milou_load_modules() {
lib/core/module-loader.sh:milou_load_category() {
lib/core/module-loader.sh:milou_module_loaded() {
lib/core/module-loader.sh:milou_list_loaded_modules() {
lib/core/module-loader.sh:milou_load_essentials() {
lib/core/module-loader.sh:milou_load_system_modules() {
lib/core/module-loader.sh:milou_load_docker_modules() {
lib/core/module-loader.sh:milou_load_user_modules() {
lib/core/module-loader.sh:milou_load_all_modules() {
lib/core/module-loader.sh:milou_load_command_modules() {
lib/core/validation.sh:milou_validate_github_token() {
lib/core/validation.sh:milou_test_github_authentication() {
lib/core/validation.sh:milou_validate_domain() {
lib/core/validation.sh:milou_check_connectivity() {
lib/core/validation.sh:milou_check_docker_access() {
lib/core/validation.sh:milou_check_docker_compose() {
lib/core/validation.sh:milou_validate_docker_compose_config() {
lib/core/validation.sh:milou_command_exists() {
lib/core/validation.sh:milou_version_compare() {
lib/core/validation.sh:milou_check_port_availability() {
lib/core/validation.sh:milou_validate_ssl_certificates() {
lib/core/validation.sh:milou_is_running_as_root() {
lib/core/validation.sh:milou_user_exists() {
lib/core/validation.sh:milou_validate_docker_permissions() {
lib/core/validation.sh:milou_validate_path() {
lib/core/validation.sh:validate_github_token() { milou_validate_github_token "$@"; }
lib/core/validation.sh:test_github_authentication() { milou_test_github_authentication "$@"; }
lib/core/validation.sh:validate_domain() { milou_validate_domain "$@"; }
lib/core/validation.sh:check_connectivity() { milou_check_connectivity "$@"; }
lib/core/validation.sh:command_exists() { milou_command_exists "$@"; }
lib/core/validation.sh:version_compare() { milou_version_compare "$@"; }
lib/core/validation.sh:check_docker_access() { milou_check_docker_access "$@"; }
lib/core/validation.sh:validate_ssl_certificates() { milou_validate_ssl_certificates "$@"; }
lib/core/user-interface.sh:milou_prompt_user() {
lib/core/user-interface.sh:milou_confirm() {
lib/core/user-interface.sh:milou_show_progress() {
lib/core/user-interface.sh:milou_validate_input() {
lib/core/user-interface.sh:milou_select_option() {
lib/core/user-interface.sh:prompt_user() { milou_prompt_user "$@"; }
lib/core/user-interface.sh:confirm() { milou_confirm "$@"; }
lib/core/user-interface.sh:show_progress() { milou_show_progress "$@"; }
lib/core/user-interface.sh:validate_input() { milou_validate_input "$@"; }
lib/core/logging.sh:milou_log_init() {
lib/core/logging.sh:milou_log() {
lib/core/logging.sh:log() { milou_log "$@"; }
lib/core/logging.sh:error_exit() { 
lib/core/command-loader.sh:milou_commands_init() {
lib/core/command-loader.sh:milou_load_command() {
lib/core/command-loader.sh:milou_load_all_commands() {
lib/core/command-loader.sh:milou_command_loaded() {
lib/core/command-loader.sh:milou_list_loaded_commands() {
lib/core/command-loader.sh:milou_commands_available() {
lib/user/environment.sh:setup_milou_user_environment() {
lib/user/environment.sh:create_milou_directories() {
lib/user/environment.sh:setup_milou_bashrc() {
lib/user/environment.sh:dps() {
lib/user/environment.sh:dlogs() {
lib/user/environment.sh:dexec() {
lib/user/environment.sh:setup_milou_profile() {
lib/user/environment.sh:setup_milou_config() {
lib/user/environment.sh:setup_milou_symlinks() {
lib/user/environment.sh:validate_milou_user_environment() {
lib/user/environment.sh:test_milou_user_cli() {
lib/user/management.sh:user_management_main() {
lib/user/management.sh:show_user_management_help() {
lib/user/management.sh:cleanup_user_management() {
lib/user/management.sh:show_user_management_info() {
lib/user/core.sh:is_running_as_root() {
lib/user/core.sh:milou_user_exists() {
lib/user/core.sh:get_current_user_info() {
lib/user/core.sh:create_milou_user() {
lib/user/core.sh:get_milou_home() {
lib/user/core.sh:validate_milou_home() {
lib/user/interface.sh:interactive_user_setup() {
lib/user/interface.sh:show_user_status() {
lib/user/interface.sh:create_user_command() {
lib/user/interface.sh:test_user_command() {
lib/user/interface.sh:migrate_user_command() {
lib/user/switching.sh:is_directory_newer() {
lib/user/switching.sh:validate_and_prepare_token() {
lib/user/switching.sh:copy_github_credentials_to_milou() {
lib/user/switching.sh:switch_to_milou_user() {
lib/user/switching.sh:migrate_to_milou_user() {
lib/user/switching.sh:ensure_proper_user_setup() {
lib/user/switching.sh:validate_user_permissions_for_setup() {
lib/user/switching.sh:cleanup_user_switching_resources() {
lib/user/security.sh:validate_user_permissions() {
lib/user/security.sh:harden_milou_user() {
lib/user/security.sh:security_assessment() {
lib/user/security.sh:quick_security_check() {
lib/user/security.sh:cleanup_security_resources() {
lib/user/security.sh:generate_security_report() {
lib/user/docker.sh:has_docker_permissions() {
lib/user/docker.sh:fix_docker_permissions() {
lib/user/docker.sh:copy_docker_credentials_to_milou() {
lib/user/docker.sh:diagnose_docker_access() {
lib/docker/compose.sh:milou_docker_init() {
lib/docker/compose.sh:milou_docker_validate_setup() {
lib/docker/compose.sh:milou_docker_compose() {
lib/docker/compose.sh:milou_docker_test_config() {
lib/docker/compose.sh:milou_check_credentials_changed() {
lib/docker/compose.sh:milou_store_credentials_hash() {
lib/docker/compose.sh:milou_cleanup_volumes_on_credential_change() {
lib/docker/compose.sh:milou_create_networks() {
lib/docker/compose.sh:milou_docker_start() {
lib/docker/compose.sh:milou_docker_stop() {
lib/docker/compose.sh:milou_docker_restart() {
lib/docker/compose.sh:get_container_name_for_service() {
lib/docker/compose.sh:milou_docker_status() {
lib/docker/compose.sh:milou_docker_logs() {
lib/docker/compose.sh:milou_docker_shell() {
lib/docker/compose.sh:start_services_with_checks() {
lib/docker/compose.sh:run_docker_compose() { milou_docker_compose "$@"; }
lib/docker/compose.sh:start_services() { milou_docker_start "$@"; }
lib/docker/compose.sh:stop_services() { milou_docker_stop "$@"; }
lib/docker/compose.sh:restart_services() { milou_docker_restart "$@"; }
lib/docker/compose.sh:show_service_status() { milou_docker_status "$@"; }
lib/docker/compose.sh:show_service_logs() { milou_docker_logs "$@"; }
lib/docker/compose.sh:get_service_shell() { milou_docker_shell "$@"; }
lib/docker/compose.sh:exec_in_service() { milou_docker_shell "$@"; }
lib/docker/compose.sh:get_milou_images_from_compose() {
lib/docker/compose.sh:get_all_required_images() {
lib/docker/compose.sh:validate_required_images() {
lib/docker/compose.sh:pull_required_images() {
lib/docker/compose.sh:run_health_checks() {
lib/docker/compose.sh:quick_health_check() {
lib/docker/registry/images.sh:get_available_image_tags() {
lib/docker/registry/images.sh:get_latest_image_tag() {
lib/docker/registry/images.sh:check_image_exists() {
lib/docker/registry/images.sh:validate_images_exist() {
lib/docker/registry/images.sh:enhanced_image_check() {
lib/docker/registry/images.sh:pull_images() {
lib/docker/registry/images.sh:try_pull_with_fallback() {
lib/docker/registry/auth.sh:validate_github_token() {
lib/docker/registry/auth.sh:test_github_authentication() {
lib/docker/registry/auth.sh:get_available_image_tags() {
lib/docker/registry/access.sh:verify_docker_access() {
lib/docker/registry/access.sh:ensure_docker_credentials() {
lib/docker/registry/access.sh:debug_docker_images() {
lib/docker/registry/access.sh:check_docker_resources() {
lib/docker/registry/access.sh:cleanup_docker_resources() {
lib/docker/registry/access.sh:test_registry_connectivity() {
lib/docker/uninstall.sh:complete_milou_uninstall() {
lib/docker/registry.sh:setup_docker_registry() {
lib/docker/registry.sh:setup_docker_registry_interactive() {
lib/docker/registry.sh:check_registry_health() {
lib/docker/registry.sh:batch_image_operations() {
lib/docker/registry.sh:docker_registry_setup() {
lib/docker/registry.sh:github_registry_auth() {
lib/docker/development.sh:milou_enable_dev_mode() {
lib/docker/development.sh:milou_disable_dev_mode() {
lib/docker/development.sh:milou_is_dev_mode_enabled() {
lib/docker/development.sh:milou_show_dev_mode_status() {
lib/docker/development.sh:milou_build_dev_images() {
lib/docker/development.sh:milou_auto_setup_dev_mode() {
lib/docker/health.sh:run_health_checks() {
lib/docker/health.sh:quick_health_check() {
lib/docker/core.sh:detect_and_handle_conflicts() {
lib/docker/core.sh:stop_containers_by_pattern() {
lib/docker/core.sh:stop_conflicting_services() {
lib/docker/core.sh:check_docker_access() {
lib/docker/core.sh:create_networks() {
lib/docker/core.sh:ensure_docker_networks() {
lib/docker/core.sh:cleanup_docker_resources() {
lib/docker/core.sh:complete_cleanup_milou_resources() {
lib/docker/core.sh:check_existing_installation() {
lib/docker/core.sh:check_port_availability() {
lib/docker/core.sh:get_port_process() {
lib/docker/core.sh:show_detailed_status() {
commands/user-security.sh:handle_user_status() {
commands/user-security.sh:handle_create_user() {
commands/user-security.sh:handle_migrate_user() {
commands/user-security.sh:handle_security_check() {
commands/user-security.sh:handle_security_harden() {
commands/user-security.sh:handle_security_report() {
commands/setup.sh:handle_setup() {
commands/docker-services.sh:handle_start() {
commands/docker-services.sh:handle_stop() {
commands/docker-services.sh:handle_restart() {
commands/docker-services.sh:handle_status() {
commands/docker-services.sh:handle_detailed_status() {
commands/docker-services.sh:handle_logs() {
commands/docker-services.sh:handle_health() {
commands/docker-services.sh:handle_health_check() {
commands/docker-services.sh:handle_shell() {
commands/docker-services.sh:handle_debug_images() {
commands/system.sh:handle_config() {
commands/system.sh:handle_validate() {
commands/system.sh:handle_backup() {
commands/system.sh:handle_restore() {
commands/system.sh:handle_update() {
commands/system.sh:handle_ssl() {
commands/system.sh:update_domain_configuration() {
commands/system.sh:restart_nginx_container() {
commands/system.sh:handle_cleanup() {
commands/system.sh:handle_uninstall() {
commands/system.sh:handle_debug_images() {
commands/system.sh:handle_diagnose() {
commands/system.sh:handle_cleanup_test_files() {
commands/system.sh:handle_install_deps() {
commands/system.sh:handle_build_images() {
commands/system.sh:handle_admin() {
commands/system.sh:show_admin_help() {
commands/system.sh:handle_admin_credentials() {
commands/system.sh:handle_admin_reset() {
commands/system.sh:reset_admin_in_database() {
